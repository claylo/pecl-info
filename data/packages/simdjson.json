{
    "category": "Tools and Utilities",
    "deprecated": false,
    "description": "Provides faster json decoding through simdjson bindings for PHP (Single Instruction, Multiple Data)",
    "latestReleaseDate": "2022-10-19T11:54:52+00:00",
    "latestVersion": "4.0.0",
    "license": "Apache 2.0",
    "name": "simdjson",
    "php8Mentioned": true,
    "releases": {
        "4.0.0": {
            "version": "4.0.0",
            "state": "stable",
            "license": "Apache 2.0",
            "releasedBy": "tandre",
            "releaseDate": "2022-10-19T11:54:52+00:00",
            "releaseNotes": "* Make the `SIMDJSON_ERR_*` constants case-sensitive in all PHP versions.\n  (The code it was based on was missing the flag needed to mark constants as case sensitive before PHP 8)\n* Fix a bug that prevented using JSON pointer in `simdjson_key_count`, `simdjson_key_exists`, and `simdjson_key_value` with a leading slash https://www.rfc-editor.org/rfc/rfc6901.html.\n\n  This bug was introduced when working around test failures following a change in json pointer validation in the underlying C simdjson library.\n* \"\" in a JSON pointer continues to refer to the entire document.\n* \"/\" in a JSON pointer now properly refers to the key that is the empty string.\n* Continue to allow the non-standard omission of the leading \"/\" for compatibility with earlier PECL releases. This may be deprecated in a subsequent release.",
            "get": "https://pecl.php.net/get/simdjson-4.0.0",
            "SPDX-License-Identifier": "Apache-2.0"
        },
        "3.0.0": {
            "version": "3.0.0",
            "state": "stable",
            "license": "Apache 2.0",
            "releasedBy": "tandre",
            "releaseDate": "2022-10-17T13:14:17+00:00",
            "releaseNotes": "* Add SimdJsonValueError. In php 8.0+, it extends ValueError, and it extends Error in older php versions.\n  This provides an API similar to the JSON module, which started throwing ValueError for invalid depths in php 8.0.\n* Throw SimdJsonValueError instead of emitting notices if $depth is too small or too large in all simdjson PHP functions.\n  simdjson_is_valid(), simdjson_key_count() and simdjson_key_exists() now have non-null return types.\n* Throw a SimdJsonException in simdjson_key_exists on error conditions such as invalid json, to be consistent with other simdjson PHP functions.\n* Add an optional boolean `$throw_if_uncountable = false` to simdjson_key_count.\n  When this is overridden to be true, simdjson_key_count will throw a SimdJsonException if the JSON pointer refers to a value that exists but is neither an array nor an object instead of returning 0.\n* Rename the parameter $assoc to $associative in simdjson_decode and simdjson_key_value, to match naming practices used in json_decode()",
            "get": "https://pecl.php.net/get/simdjson-3.0.0",
            "SPDX-License-Identifier": "Apache-2.0"
        },
        "2.1.0": {
            "version": "2.1.0",
            "state": "stable",
            "license": "Apache 2.0",
            "releasedBy": "tandre",
            "releaseDate": "2022-10-14T01:06:14+00:00",
            "releaseNotes": "* Allow out of range 64-bit values in JSON integer syntax and allow floating point values outside of the max/min finite floating point values (i.e. parsing to +/- infinity).\n\n  This allows simdjson_decode() to be used as a replacement for json_decode() in more use cases.\n* Return the correct value in simdjson_key_count() for JSON pointers to arrays/objects exceeding size 0xFFFFFF.\n  Previously, this would be limited to returning at most 0xFFFFFF(16777215).\n* Throw 'SimdJsonException extends RuntimeException' instead of RuntimeException.\n* Set the error code from simdjson as SimdJsonException->getCode()\n* Expose error_code constants from simdjson as `SIMDJSON_ERR_$ERRCODENAME`",
            "get": "https://pecl.php.net/get/simdjson-2.1.0",
            "SPDX-License-Identifier": "Apache-2.0"
        },
        "2.0.5": {
            "version": "2.0.5",
            "state": "stable",
            "license": "Apache 2.0",
            "releasedBy": "tandre",
            "releaseDate": "2022-10-12T23:09:08+00:00",
            "releaseNotes": "* Reuse PHP's 1-byte and 0-byte interned strings in simdjson_decode, reducing memory usage for those strings. (e.g. for the key/value in '{\"x\":\"\"}')\n* Return correct count in simdjson_key_count. Properly return counts larger than 0xFFFFFF instead of returning 0xFFFFFF.",
            "get": "https://pecl.php.net/get/simdjson-2.0.5",
            "SPDX-License-Identifier": "Apache-2.0"
        },
        "2.0.4": {
            "version": "2.0.4",
            "state": "stable",
            "license": "Apache 2.0",
            "releasedBy": "tandre",
            "releaseDate": "2022-10-01T15:37:38+00:00",
            "releaseNotes": "* Add `-fvisibility=hidden` to compiler options to reduce compiled extension size by avoiding exporting symbols by default.\n* If the requested json parsing $depth is excessively large when reallocating larger buffers for the C simdjson parser,\n  then internally use a smaller $depth that would behave identically with lower memory usage. (#66)\n* Update simdjson to properly reject surrogate pairs with an invalid low surrogate. (https://en.wikipedia.org/wiki/UTF-16)",
            "get": "https://pecl.php.net/get/simdjson-2.0.4",
            "SPDX-License-Identifier": "Apache-2.0"
        },
        "2.0.3": {
            "version": "2.0.3",
            "state": "stable",
            "license": "Apache 2.0",
            "releasedBy": "tandre",
            "releaseDate": "2022-08-30T16:09:37+00:00",
            "releaseNotes": "* Fix error validating package.xml when uploading to PECL due to blank username of lead without a PECL account.",
            "get": "https://pecl.php.net/get/simdjson-2.0.3",
            "SPDX-License-Identifier": "Apache-2.0"
        }
    },
    "summary": "Provides faster json decoding through simdjson bindings for PHP",
    "SPDX-License-Identifier": "Apache-2.0"
}
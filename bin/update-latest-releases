#!/usr/bin/env php
<?php

function fetch_xml($url)
{
    $ch = curl_init($url);
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        // Let cURL handle gzip/deflate/br if present; also tolerates missing header cases better
        CURLOPT_ENCODING => '',            // '' means "accept all" and auto-decode
        CURLOPT_USERAGENT => 'PHP RSS bot',
        CURLOPT_TIMEOUT => 10,
        CURLOPT_FOLLOWLOCATION => true,
    ]);
    $body = curl_exec($ch);
    if ($body === false) {
        throw new RuntimeException('HTTP error: ' . curl_error($ch));
    }
    curl_close($ch);

    // If they forgot Content-Encoding and cURL didnâ€™t auto-decode, sniff + decode:
    $body = maybe_decompress($body);

    // Parse
    libxml_use_internal_errors(true);
    $xml = simplexml_load_string($body);
    if (!$xml) {
        throw new RuntimeException('XML parse failed');
    }
    return $xml;
}

function maybe_decompress(string $data): string
{
    // already XML?
    if (preg_match('/^\s*<\?xml|\s*<(rss|rdf)\b/i', $data)) return $data;

    // gzip magic
    if (isset($data[0], $data[1]) && $data[0] === "\x1f" && $data[1] === "\x8b") {
        $out = @gzdecode($data);
        if ($out !== false) return $out;
    }
    // zlib/deflate (common headers: 78 01 / 78 5E / 78 9C / 78 DA)
    if (isset($data[0], $data[1]) && $data[0] === "\x78" && in_array($data[1], ["\x01", "\x5E", "\x9C", "\xDA"], true)) {
        $out = @gzuncompress($data);
        if ($out !== false) return $out;
    }
    // brotli (if ext-brotli is around)
    // if (function_exists('brotli_uncompress')) {
    //     $out = @brotli_uncompress($data);
    //     if ($out !== false) return $out;
    // }
    return $data; // give XML parser a shot anyway
}

// Usage
$xml = fetch_xml('https://pecl.php.net/feeds/latest.rss');



// PECL RSS feeds don't use/respect eTags, so we don't make an If-Modified-Since request.
// $xml = file_get_contents('https://pecl.php.net/feeds/latest.rss');
// just to be safe
$xml = mb_convert_encoding($xml, 'UTF-8');

$dry = false;
if (isset($argv[1]) && $argv[1] == '--dry-run') {
    $dry = true;
}

echo "::debug::latest.rss is " . strlen($xml) . " characters\n";

// make the date easier to access
function adjustNamespaces($el)
{
    foreach ($el->getNamespaces(true) as $prefix => $ns) {
        if ($prefix === '') {
            continue;
        }
        $children = $el->children($ns);
        foreach ($children as $tag => $content) {
            $el->{$prefix . ':' . $tag} = $content;
        }
    }
}

$feed = new SimpleXMLElement(
    $xml,
    LIBXML_NOWARNING | LIBXML_NOERROR | LIBXML_NOCDATA
);

$date = 'dc:date';

$releases = [];
echo "::group::update-latest-releases\n";
foreach ($feed->item as $item) {
    adjustNamespaces($item);
    // var_dump($item);
    // echo "{$item->title}\n";
    $link = (string) $item->link;
    $qs = parse_url(html_entity_decode($link), PHP_URL_QUERY);
    $q = [];
    parse_str($qs, $q);
    // echo "  package: {$q['package']}\n";
    // echo "  version: {$q['release']}\n";
    $reldate = $item->{$date};
    // echo "  releaseDate: $reldate\n";
    // UTC dates shouldn't be hard-coded to -05:00!!
    // @see https://github.com/php/web-pecl/blob/0498405985171c00613fd8572b79a02ac2ca550f/templates/pages/feeds/feeds.php#L33
    // ... but we know that everything input/output in pecl is UTC!
    // @see https://github.com/php/web-pecl/blob/0498405985171c00613fd8572b79a02ac2ca550f/include/bootstrap.php#L94
    $reldate = str_replace('-05:00', '+00:00', $reldate);
    $d = DateTimeImmutable::createFromFormat(DATE_ATOM, $reldate, new DateTimeZone('UTC'));
    $releases[] = [
        'package' => strtolower($q['package']),
        'version' => $q['release'],
        'releaseDate' => $d->format(DATE_ATOM)
    ];
}

// print_r($releases);
$commitmsg = '';
$stepSummary = '';
$pkglist = [];
if (sizeof($releases) > 0) {
    $packages = json_decode(file_get_contents('data/packages.json'), true);
    // have we seen this release?
    foreach ($releases as $rel) {
        $pkg = $rel['package'];
        $v = $rel['version'];
        // is it a new package?
        if (! array_key_exists($pkg, $packages)) {
            $output = [];
            $msg = "adding new package $pkg with $v\n";
            echo $msg;
            $stepSummary .= "* $msg";
            $pkglist[] = "$pkg $v";
            $commitmsg .= "  * add :sparkles: new package $pkg with version {$v}\n";
            if ($dry === false) {
                exec("bin/refresh-package \"$pkg\" \"$v\"", $output);
                if (sizeof($output) > 0) {
                    foreach ($output as $out) {
                        echo "$out\n";
                    }
                }
            }
        } else {
            $pkgReleases = $packages[$pkg]['releases'];
            if (! array_key_exists($v, $pkgReleases)) {
                $output = [];
                $pkglist[] = $packages[$pkg]['name'] . " $v";
                $msg = "refreshing $pkg with $v\n";
                echo $msg;
                $stepSummary .= "* $msg";
                $commitmsg .= "  * update {$packages[$pkg]['name']} with release {$v}\n";
                if ($dry === false) {
                    exec("bin/refresh-package \"$pkg\" \"$v\"", $output);
                    if (sizeof($output) > 0) {
                        foreach ($output as $out) {
                            echo "$out\n";
                        }
                    }
                }
            } else {
                $msg = "skipping known release $pkg $v\n";
                echo $msg;
                $stepSummary .= "* $msg";
            }
        }
    }
}
if ($dry === false) {
    if (! empty($commitmsg)) {
        $plural = 'releases';
        if (sizeof($pkglist) == 1) {
            $plural = 'release';
        }
        file_put_contents('commit.txt', "feat: add " . join(", ", $pkglist) . " $plural\n\n" . $commitmsg);
    }
} else {
    echo "DRY RUN:\n";
    if (! empty($commitmsg)) {
        $plural = 'releases';
        if (sizeof($pkglist) == 1) {
            $plural = 'release';
        }
        echo "feat: add " . join(", ", $pkglist) . " $plural\n\n" . $commitmsg;
    } else {
        echo "  NO ACTION.\n";
    }
}
echo "::endgroup::\n";

$ghStepSummaryFile = getenv('GITHUB_STEP_SUMMARY');
if ($ghStepSummaryFile !== false) {
    file_put_contents($ghStepSummaryFile, $stepSummary, FILE_APPEND);
}

exit(0);
